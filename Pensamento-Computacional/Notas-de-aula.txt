__ Visão geral do Pensamento Computacional __

1)Visão Geral
- Conceito:
Refere-se ao processo de pensamento envolvido na expressão de soluções em passos computacionais ou algoritmos que podem ser implementados no computador
Habilidade de formulação de problemas e resolução dos mesmos
Sistemático e Eficiente
Deve ser aplicado de forma que um ser humano e o computador entendam
É considerada uma habilidade generalista
-Baseado em 4 pilares:
:: Decomposição: Dividir um problema complexo em subproblemas (grupos que façam sentido do ponto de vista de eficiência)
:: Reconhecimento de padrões: Identificar padrões ou tendências - Similaridades e diferenças entre os problemas
:: Abstração: Extrapolar o conceito do problema para uma forma generalista - conseguir pegar algo particular e generalizar
:: Design de algoritmos: Automatizar; Definir passo a passo a solução do problema - vai garantir a solução eficiente do problema; dado uma entrada (problema e dados do problema), tenho uma saída, temos uma sequência de operações realizadas que vão me levar a solução
- Processo Contínuo : Ciclo: Análise -> Refinamento -> Teste -> Análise...
:: Definir uma solução
:: Testar a solução
:: Aperfeiçoamento da solução encontrada - objetivo: otimizar recursos; quanto mais eficiente, menor o uso de recursos, menor custo
1) Abstração: Resolução de problemas [Habilidades Humanas]
2) Automatização: Expressão da solução [Recursos computacionais]
3) Análise: Execução da solução e avaliação (refinamento) [Recursos computacionais]
O forte do computador é executar a solução, melhor que o ser humano
- Variação dos pilares:
:: Raciocínio Lógico
:: Refinamento
Ciclo: Raciocínio lógico -> Decomposição -> Padrões -> Abstração -> Algoritmos -> Refinamento -> Raciocínio lógico...
-Competências:
:: Pensamento sistemático
:: Colaboração dentro da equipe - informação fica mais clara e objetiva para todos
:: Criatividade e design - advindas do senso crítico maior
:: Facilitador - facilita o desenvolvimento

2) Habilidades Complementares
1 - Raciocínio Lógico
- Conceito: Raciocínio lógico é uma forma de pensamento estruturado, ou raciocínio, que permite encontrar a conclusão ou determinar a resolução de um problema.
Habilidade de treinamento: quanto mais você utiliza esse tipo de raciocício, mais internalizado ele fica; é uma habilidade que não é ensinada, vem através de treinamento
- Classificação:
:: Indução - Fenômeno observado -> levo para o campo das ideias -> Leis e teorias [Ciências experimentais]
:: Dedução - Oposto da indução: Dado uma Lei e teoria -> Previsões e explicações [Ciências exatas]
:: Abdução - Conclusão -> Premissa [Processo investigativo; Diagnósticos]
			Inferência
	Sintética			Analítica
Abdução		Indução				Dedução
Sintética: por construção, síntese
Analítica: por análise

2 - Aperfeiçoamento
Sinônimos: Melhoramento, Ato de aperfeiçoar, Aprimoramento, Refinamento
A partir de uma solução, determinar pontos de melhora e refinamento
- Ato de aperfeiçoar:
:: Encontrar solução eficiente [Melhor uso de recursos]
:: Otimizar processos [Melhor uso de recursos]
:: Simplificar linhas de códigos [Melhorar códigos e algoritmos]
:: Funções bem definidas [Melhorar códigos e algoritmos]
- Processo contínuo
- Presente em todas as etapas
- Vantagens:
:: Maior compreensão
:: Mais eficiência
:: Menos tempo
:: Menos armazenamento
Ciclo: Desenvolver solução -> Aperfeiçoar -> Desenvolver solução...

__ Pilares do Pensamento Computacional __
1) Decomposição
"If you can't solve a problem, then there is an easier problem that you can solve: find it" (George Polya - professor e matemático)
Dado um problema complexo, devemos quebrá-lo em problemas menores. Portanto, problemas mais fáceis e gerenciáveis.
A decomposição é o primeiro passo da resolução de problemas dentro do conceito de pensamento computacional.
Estratégia:
- Análise: processo de quebrar e determinar partes menores e gerenciáveis
:: Estudar, explorar o problema
:: Realizar exame detalhado
:: Decompor em elementos constituintes
- Síntese: combinar os elementos recompondo o problema original
A partir do momento que dividi o problema em partes menores, preciso reuni-las depois de forma que faça sentido
:: Processo de reconstrução
:: Fundir os elementos de maneira coerente
:: Consiste em reunir elementos distintos em um único elemento
- Decomposição:
Objetivo: facilitar a resolução de problemas em diversos contextos; trazer mais eficiência, rapidez e otimização de recursos
Ordem de execução de tarefas menores:
:: Sequencial: dependência entre tarefas; executadas em "fila"
:: Paralelo: tarefas podem ser executadas concomitantemente
   + eficiência, - tempo, + poder computacional, - custos
Variáveis -> Pequenos problemas -> Segmentação
Existem maneiras distintas de decompor o mesmo problema
- Como decompor?
:: Entenda o problema
:: Identifique: Componentes; Características, dependências
Quais são os aspectos fundamentais do problema, separo os componentes, identifico as características e dependências
:: 2º plano: Problema principal
Identificar ou coletar dados -> Agregar os dados -> Funcionalidade
- Exemplo: Criar um app:
Definição de componentes e etapas:
:: Finalidade
:: Interface
:: Funcionalidades
:: Pré-requisitos

2) Reconhecimento de padrões
- Palavras-chave de referência:
:: Modelo base: construir a partir de uma referência, de algo já estruturado
:: Estrutura invariante: tem caracterísiticas bem determinadas que não se modificam
:: Repetição: dessa estrutura invariante
- Similaridades e diferença
Ex1: Fotos de redes sociais - pegar os metadados, aplicar técnicas de compressão, armazenar em bancos de dados de forma otimizada
Ex2:: Compressão de dados - por reconhecimento de padrões
O ser humano é capaz de fazer o reconhecimento de padrões de forma inerente
  > quando se trata de algo novo, aí sim, fazemos a identificação de suas características para classificação
- Por que determinar padrões?
:: Generealizar, com objetivo de obter resolução para problemas diferentes (que sejam similares entre si)
- Classificação de objetos: depende do domínio e o do tipo de mídia (objeto tratado)
:: Categorias
:: Classes
- Como o computador reconhece padrões?
Pelo ser humano:
> Grau de similaridade                      __
> Grupos conhecidos x objeto desconhecido   __  Comparação
Pelo computador:
> Representação de atributos (fornecer dados)
> Aprendizado - conceito associado ao objeto
> Armazenar dados
> Determinar regras de decisão
- Abordagem de reconhecimento de padrões:
:: Extração de características
:: Classificação de dados
:: Tem diferentes métodos e aplicações
- Aplicações do reconhecimento de padrões:
:: Classificação de dados
:: Reconhecimento de imagem
:: Reconhecimento de fala
:: Análise de cenas
:: Classificação de documentos
- Áreas que aplicam:
:: Machine Learning
:: Redes Neurais
:: Inteligência Artificial
:: Ciência de dados

3) Abstração (ou Generalização)
Conceitos: 
Abstrair: observar, um ou mais elementos, avaliando características e propriedades em separado
Abstração: processo intelectual de isolamento de um objeto da realidade
           > capacidade de pegar um objeto concreto e abstraí-lo, generalizá-lo de forma que você consiga tirar a dependência dele do concreto, e você possa utilizar esse abstrato em diversas situações
Generalizar: tornar-se geral, mais amplo; extender
Generalização: na lógica, é a operação intelectual que consiste em reunir numa classe geral, um conjunto de seres ou fenômenos similares
- Como classificar os dados?
:: Características
:: Pontos essenciais 
   > cada objeto tem peculiaridades, para generalizar é preciso deixar de lado os detalhes e focar nos pontos mais importantes
:: Generalizar x detalhar
   > generalizar um objeto com base em suas características essenciais (ignorando características desnecessárias ao meu contexto), de forma a poder classificá-lo
- Representação
- Exemplos de conceitos baseados em abstrações:
:: Algoritmos Merge sort, Clustering, Busca binária
:: Máquinas de estado
:: Estruturas de dados: árvores, grafos, listas
:: Linguagens de programação
:: Redes de comunicação (ex: broadcast, comunicação paralela0)
:: Arquiteturas: cliente-servidor, ponto a ponto, estrela

4) Algoritmos
Pilar principal dentro do pensamento computacional, no sentido de que ele é determinante para que possamos executar as instruções e encontrar a solução de maneira mais eficiente
- O computador embora seja uma excelente e eficiente ferramenta de trabalho, ele NÃO OPERA SOZINHO
  > Precisa de instruções detalhadas
- Processamento de dados:
O computador recebe, manipula e armazena dados
> através do uso de Programas
                    > possuem instruções
                              > programadas pelos desenvolvedores
- Processo de resolução de problemas "step by step" utilizando instruções
> Instruções:
  : O que precisa ser feito?
  : Qual a ordem de execução?
  : Precisa ser entendido pelo humano e pela máquina
- Desenvolvimento do Programa
:: Análise
   > Estudo e definição dos dados de entrada e saída
:: Algoritmo
   > Descreve o problema por meio de ferramentas narrativas, fluxograma ou pseudocódigo
:: Codificação
   > O algoritmo é codificado de acordo com a linguagem de programação escolhida
Instruções detalhadas -> Algoritmo -> Programa
- Algoritmos:
:: Sequência de passos com objetivo definido
:: Execução de tarefas específicas (para que o computador entenda)
:: Conjunto de operações que resultam em uma sucessão finita de ações
- Como construir um algoritmo?
:: Compreensão do problema - Pontos mais importantes
:: Definição dados de entrada - Dados fornecidos e Cenário
:: Definir processamento - Cálculos e Restrições
:: Definir dados de saída - Após o processamento
:: Utilizar um método de construção - Construção e refinamento do algoritmo
:: Teste e diagnóstico
- Métodos para construir um algoritmo:
:: Narrativa | utilização de linguagem natural
               + sem conceitos novos; - diversas interpretações possíveis
:: Fluxograma | utilização de símbolos pré-definidos
                + simples entendimento; - conhecimento prévio da estrutura e símbolos
:: Pseudocódigo | portugol
                  + regras definidas; - passos a serem seguidos
Observação final: para aplicação do pensamento computacional não é necessária a utilização de todas as etapas (pilares)

__ Estudos de caso __
1) Estudo de caso: Perdido
Como resolver o problema utilizando o pensamento computacional?
- Identificar mecanismos
- Recursos comuns
- Detalhes importantes
Decomposição do problema original:
Sobrevivência
	> Água
		> Chuva
		> Nascente
			> Fogo
	> Comida
		> Coletar
		> Caçar
			> Fogo
	> Abrigo
		> Localização
			> Mapa
		> Proteção
			> Fogo
			> Lança
		> Quente e seco
			> Fogo
Repetição/Reconhecimento de padrões: Fogo - este é o detalhe primordial e mais importante
Abstração: Mapa - é construído por abstração, focar nos aspectos principais: Onde procurar água, procurar comida, ter abrigo e quais as zonas perigosas
Os algoritmos podem ser construídos a partir daqui para diversas situações como: pescar, encontrar água, construir abrigo, maximizar chances de resgate

2) Estudo de caso 2: Soma de intervalo
Soma de números entre 1 e 200:
Decomposição:
Pegando os extremos
200 + 1
199 + 2
198 + 3...
Identificando padrão:
200 + 1 = 201
199 + 2 = 201
198 + 3 = 201
197 + 4 = 201...
Expressando de forma generalista:
Valor se repete - Quantas vezes? 200/2 = 100 vezes
Resultado: 201 x 100 = 20100
Expressando em variáveis
[x,y] -> intervalo (1 e 200)
y + x = resultado parcial
(y-1)+(x+1)=resultado_parcial
y/2 = total (200/2=100)
total x resultado_parcial = resultado (100x201=20100)
Estudo de caso 3: Adivinhe o número
Solução por busca binária

3) Conclusão do curso